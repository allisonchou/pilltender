// =========================================================
// Fluid grid system for sass
// =========================================================


//////////////////////////////////////// GRID VARIABLES

// Define how generated grid elements should be positioned
// Might be 'float' or 'none' By default it's 'float'
// Use none if you want to use same grid mixins with float and inline props for different page elements
$position-method: "float"

$gs_width: 100%
$gs_gutter-width: 'auto'
$gs_gutter-height: 'auto'
$gs_gutter-width-fallback: 'auto'

$column_count: 1
$column_total-count: 12
$column_gutter-height: 2%
$column_gutter-width: 2%
$column_gutter-height-fallback: 2%
$column_gutter-width-fallback: 2%
$column_height: 'auto'

// Predefined class names for generator
// $gs-container: 'gs-container'
// $gs-column: 'gs-column'
// $gs-row: 'gs-row'
// $gs-push: 'gs-push'
// $gs-pull: 'gs-pull'



//////////////////////////////////////// INTERNAL MIXINS

// Calc() mixin
=calc($property, $expression)
	#{$property}: -webkit-calc(#{$expression})
	#{$property}: -moz-calc(#{$expression})
	#{$property}: calc(#{$expression})

// Clearfix
=gs_clear
	clear: both
	&:before,
	&:after
		display: block
		content: ''
		clear: both
		height: 0



//////////////////////////////////////// GRID CONTAINER MIXIN

// GS Mixins
// Grid system container mixin, should be used for grid container and rows.

=gs($gs_w: $gs_width, $gs_gutter-w: $gs_gutter-width, $gs_gutter-h: $gs_gutter-height, $gs_gutter-w-fallback: $gs_gutter-width-fallback)

	// Grid width and margin math for calc() and fallback
	// Additional check to prevent errors
	$half-gutter-h: null
	$half-gutter-w: null
	$half-gutter-w-fallback: null

	@if $gs_gutter-h != 'auto'
		$half-gutter-h: $gs_gutter-h / 2
	@if $gs_gutter-w != 'auto'
		$half-gutter-w: $gs_gutter-w / 2
	@if $gs_gutter-w-fallback != 'auto'
		$half-gutter-w-fallback: $gs_gutter-w-fallback / 2

	// Check gutter width and it fallback for `auto` values, if false - return no math variant
	@if $gs_gutter-w != 'auto' and $gs_gutter-w-fallback != 'auto'

		// Check gutter value, if its units not equal to grid units - return calc math with fallback<
		// else - common math
		@if unit($gs_gutter-w) != unit($gs_w) and unitless($gs_gutter-w) == false

			// Check gutter fallback value for valid  units,
			// if true - continue math with calc() property and fallback
			@if unit($gs_gutter-w-fallback) == unit($gs_w) and unitless($gs_gutter-w-fallback) == false
				width: $gs_w - $gs_gutter-w-fallback
				+calc(width, #{$gs_w} - #{$gs_gutter-w})
				margin: $half-gutter-h $half-gutter-w-fallback
				+calc(margin-left, $half-gutter-w)
				+calc(margin-right, $half-gutter-w)

			@else
				@error "Fallback gutter units must be the same as grid width units `#{unit($gs_w)}`"

		@else
			width: $gs_w - $gs_gutter-w
			margin: $half-gutter-h $half-gutter-w

	@else
		width: $gs_w
	+gs_clear



//////////////////////////////////////// COLUMN MIXIN

// Column mixin has next variables: column count for current element, total column count in row, horizontal gutter and vertical gutter and their fallbacks.
// By default it sets to 1 column of 12 total columns wit 2% gutters.

=gs-column($column_c: $column_count, $column_total-c: $column_total-count, $column_gutter-w: $column_gutter-width, $column_gutter-h: $column_gutter-height, $column_h: $column_height, $column_gutter-w-fallback: $column_gutter-width-fallback, $column_gutter-h-fallback: $column_gutter-height-fallback, $gs_w: $gs_width, $pos-method: $position-method)

	// Grid gutter width and margin math for calc() and fallback
	// Additional check to prevent errors
	$half-gutter-h: null
	$half-gutter-w: null
	$half-gutter-w-fallback: null
	$half-gutter-h-fallback: null

	@if column_gutter-w != 'auto'
		$half-gutter-w: $column_gutter-w / 2
	@if $column_gutter-h != 'auto'
		$half-gutter-h: $column_gutter-h / 2
	@if $column_gutter-w-fallback != 'auto'
		$half-gutter-w-fallback: $column_gutter-w-fallback / 2
	@if $column_gutter-h-fallback != 'auto'
		$half-gutter-h-fallback: $column_gutter-h-fallback / 2

	// Column width math
	$column_w: $gs_w / $column_total-c * $column_c

	// Column positioning method
	@if $pos-method != 'none' and $pos-method == 'float'
		float: left

	// Check gutter width and it fallback for `auto` values, if false - return no math variant
	@if $column_gutter-w != 'auto' and $column_gutter-w-fallback != 'auto'

		// Check gutter value, if its units not equal to grid units - return calc math with fallback<
		// else - common math
		@if unit($column_gutter-w) != unit($gs_w) and unitless($column_gutter-w) == false

			// Check gutter fallback value for valid  units,
			// if true - continue math with calc() property and fallback
			@if unit($column_gutter-w-fallback) == unit($gs_w) and unitless($column_gutter-w-fallback) == false
				width: $column_w - $column_gutter-w-fallback
				+calc(width, #{$column_w} - #{$column_gutter-w})
				margin-left: $half-gutter-w-fallback
				margin-right: $half-gutter-w-fallback
				+calc(margin-left, $half-gutter-w)
				+calc(margin-right, $half-gutter-w)

			@else
				@error "Fallback gutter units must be the same as grid width units `#{unit($gs_w)}`"

		@else
			width: $column_w - $column_gutter-w
			margin-left: $half-gutter-w
			margin-right: $half-gutter-w

	@else
		width: $column_w

	// Column height math
	// Check gutter height and it fallback for `auto` values, if false - return no math variant
	@if $column_gutter-h != 'auto' and $column_gutter-h-fallback != 'auto' and $column_h != 'auto'

		// Check gutter value, if its units not equal to grid units - return calc math with fallback<
		// else - common math
		@if unit($column_gutter-h) != unit($gs_w) and unitless($column_gutter-h) == false

			// Check gutter fallback value for valid  units,
			// if true - continue math with calc() property and fallback
			@if unit($column_gutter-h-fallback) == unit($column_h) and unitless($column_gutter-h-fallback) == false
				height: $column_h - $column_gutter-h-fallback
				+calc(height, #{$column_h} - #{$column_gutter-h})
				margin-top: $half-gutter-h-fallback
				margin-bottom: $half-gutter-h-fallback
				+calc(margin-top, $half-gutter-h)
				+calc(margin-bottom, $half-gutter-h)

			@else
				@error "Fallback gutter units must be the same as column height units `#{unit($column_h)}`"

		@else
			height: $column_h - $column_gutter-h
			margin-top: $half-gutter-h
			margin-bottom: $half-gutter-h



//////////////////////////////////////// PUSH and PULL MIXIN

// Offset mixin allows to push column left or right on some distance.
// Expected settings: distance-column count to move on, total column count in row, horizontal gutter like in other columns.
// By default it sets to 1 column of 12 total columns with 2% gutters.

=gs-push($column_c: $column_count, $column_total-c: $column_total-count, $column_gutter-w: $column_gutter-width, $column_gutter-w-fallback: $column_gutter-width-fallback, $gs_w: $gs_width)

	// Grid gutter width and margin math for calc() and fallback
	// Additional check to prevent errors
	$half-gutter-w: null
	$half-gutter-w-fallback: null

	@if $column_gutter-w != 'auto'
		$half-gutter-w: $column_gutter-w / 2
	@if $column_gutter-w-fallback != 'auto'
		$half-gutter-w-fallback: $column_gutter-w-fallback / 2

	// Column width math for calc() and fallback
	$position_w: $gs_w / $column_total-c * $column_c

	// Check gutter width and it fallback for `auto` values, if false - return no math variant
	@if $column_gutter-w != 'auto' and $column_gutter-w-fallback != 'auto'

		// Check gutter value, if its units not equal to grid units - return calc math with fallback<
		// else - common math
		@if unit($column_gutter-w) != unit($gs_w) and unitless($column_gutter-w) == false

			// Check gutter fallback value for valid  units,
			// if true - continue math with calc() property and fallback
			@if unit($column_gutter-w-fallback) == unit($gs_w) and unitless($column_gutter-w-fallback) == false
				margin-left: $position_w + $half-gutter-w-fallback
				+calc(margin-left, #{$position_w} + #{$half-gutter-w})

			@else
				@error "Fallback gutter units must be the same as grid width units `#{unit($gs_w)}`"

		@else
			margin-left: $position_w + $half-gutter-w


=gs-pull($column_c: $column_count, $column_total-c: $column_total-count, $column_gutter-w: $column_gutter-width, $column_gutter-w-fallback: $column_gutter-width-fallback, $gs_w: $gs_width)

	// Grid gutter width and margin math for calc() and fallback
	// Additional check to prevent errors
	$half-gutter-w: null
	$half-gutter-w-fallback: null

	@if $column_gutter-w != 'auto'
		$half-gutter-w: $column_gutter-w / 2
	@if $column_gutter-w-fallback != 'auto'
		$half-gutter-w-fallback: $column_gutter-w-fallback / 2

	// Column width math for calc() and fallback
	$position_w: $gs_w / $column_total-c * $column_c

	// Check gutter width and it fallback for `auto` values, if false - return no math variant
	@if $column_gutter-w != 'auto' and $column_gutter-w-fallback != 'auto'

		// Check gutter value, if its units not equal to grid units - return calc math with fallback<
		// else - common math
		@if unit($column_gutter-w) != unit($gs_w) and unitless($column_gutter-w) == false

			// Check gutter fallback value for valid  units,
			// if true - continue math with calc() property and fallback
			@if unit($column_gutter-w-fallback) == unit($gs_w) and unitless($column_gutter-w-fallback) == false
				margin-right: $position_w + $half-gutter-w-fallback
				+calc(margin-right, #{$position_w} + #{$half-gutter-w})

			@else
				@error "Fallback gutter units must be the same as grid width units `#{unit($gs_w)}`"

		@else
			margin-right: $position_w + $half-gutter-w



//////////////////////////////////////// GENERATED GRID

// Generate classnames for grid
// .#{$gs-container}
// 	+gs();

// @for $i from 1 through $column_total-count
// 	.#{$gs-column}-#{$i}
// 		+gs-column($i)


// @for $i from 1 through ($column_total-count - 1)
// 	.#{$gs-push}-#{$i}
// 		+gs-push($i)

// 	.#{$gs-pull}-#{$i}{
// 		+gs-pull($i)